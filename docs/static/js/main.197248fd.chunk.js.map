{"version":3,"sources":["utils/index.js","components/ECommerce/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","MensajeContract","props","state","allMs","addMs","bind","getMsMensaje","Utils","window","call","ms","totalMs","parseInt","_hex","i","splice","ms2","push","className","role","address","fromHex","mensaje","document","getElementById","value","destinatario","send","action","type","name","id","placeholder","onClick","Component","TronLinkInfo","accountAddress","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","trx","getAccount","account","accountAddressInBase58","setState","getBalance","balanceInSun","balanceInTRX","fromSun","getBandwidth","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","open","TronLinkGuide","installed","href","target","rel","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","ReactDOM","render","module","exports"],"mappings":"gUAaeA,EAbD,CACZC,SAAS,EACTC,UAAU,EAEVC,WAAWF,GACTG,KAAKH,QAAUA,GAGXI,YAAYJ,EAASK,GAAkB,IAAD,kIACpBL,EAAQC,WAAWK,GAAGD,GADF,OAC1C,EAAKJ,SADqC,sD,QCKzBM,G,yDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAGT,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0LAaXE,EAAMV,YAAYW,OAAOf,QAnBX,sC,qQAwBZU,EAAUP,KAAKM,MAAfC,M,SAEOI,EAAMb,SAASY,aAAa,GAAGG,O,OAA1CC,E,OAEAC,EAAUC,SAASF,EAAG,GAAGG,MACzBC,EAAI,EAERX,EAAMY,OAAO,G,YAEND,GAAKH,G,kCACMJ,EAAMb,SAASY,aAAaQ,GAAGL,O,QAE/B,mBAFZO,E,QAEK,IACPb,EAAMc,KACN,yBAAKC,UAAU,wBAAwBC,KAAK,SAC1C,yBAAKD,UAAU,oBAAoBF,EAAI,IACvC,6BACA,yBAAKE,UAAU,mBAAf,cAA6CV,OAAOf,QAAQ2B,QAAQC,QAAQL,EAAI,OAKpFF,I,6QAUEQ,EAAUC,SAASC,eAAe,WAAWC,MAC7CC,EAAeH,SAASC,eAAe,aAAaC,M,kBAEjDlB,EAAMb,SAASU,MAAMkB,EAASI,GAAcC,Q,gIAM3C,IAAD,OACCxB,EAAUP,KAAKM,MAAfC,MAER,OAEE,yBAAKe,UAAU,iCAEX,0BAAMU,OAAO,GAAGV,UAAU,uBACxB,2BAAOW,KAAK,OAAOC,KAAK,UAAUC,GAAG,UAAUC,YAAY,uBAC3D,2BAAOH,KAAK,OAAOC,KAAK,YAAYC,GAAG,YAAYC,YAAY,uCAC/D,4BAAQH,KAAK,SAASI,QAAS,kBAAM,EAAK7B,UAA1C,WAIJ,yBAAKc,UAAU,4BACZf,GAGH,yBAAKe,UAAU,4BACb,4BAAQA,UAAU,kBAAkBe,QAAS,kBAAM,EAAK3B,iBAAxD,0B,GA/EmC4B,cCTxBC,G,yDACnB,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXkC,eAAgB,oCAChBC,eAAgB,oCAChBC,iBAAkB,uCANH,E,gEAYjB1C,KAAK2C,sBACL3C,KAAK4C,sBACL5C,KAAK6C,0B,gLAMiBjC,OAAOf,QAAQiD,IAAIC,a,OAAnCC,E,OACAR,EAAiBQ,EAAQxB,QACxByB,EAAyBrC,OAAOf,QAAQ2B,QAAQC,QACpDe,GAGHxC,KAAKkD,SAAS,CACZV,eAAgBS,I,oRAMSrC,OAAOf,QAAQiD,IAAIK,a,OAAxCC,E,OACAC,EAAezC,OAAOf,QAAQyD,QAAQF,GAG5CpD,KAAKkD,SAAS,CAEZT,eAAgBY,I,oRAMazC,OAAOf,QAAQiD,IAAIS,e,OAA5Cb,E,OAEN1C,KAAKkD,SAAS,CACZR,iBAAkBA,I,qIAKZ,IAAD,EACsD1C,KAAKM,MAA1DkC,EADD,EACCA,eAAgBC,EADjB,EACiBA,eAAgBC,EADjC,EACiCA,iBACxC,OACE,yBAAKpB,UAAU,oCACb,yBAAKA,UAAU,uBAAf,yBACA,yBAAKA,UAAU,wBAAf,YACW,8BAAOkB,IAElB,yBAAKlB,UAAU,wBAAf,YACW,8BAAOmB,IAElB,yBAAKnB,UAAU,0BAAf,cACa,8BAAOoB,S,GAlEcJ,c,iBCCpCkB,G,OAAe,+EAEfC,EACF,yBAAKnC,UAAU,QACX,yBAAKoC,IAAMC,IAAeC,IAAI,mBAIhCC,EAAe,WACjBjD,OAAOkD,KAAKN,EAAc,WAsCfO,EAnCO,SAAA1D,GAAU,IAAD,EAGvBA,EADA2D,UAGJ,YAL2B,SAsBvB,yBAAK1C,UAAU,iBAAiBe,QAAUwB,GACtC,yBAAKvC,UAAU,QACX,+CACA,wLAKFmC,GAvBF,yBAAKnC,UAAU,WAAWe,QAAUwB,GAChC,yBAAKvC,UAAU,QACX,iDACA,8IAEgB,uBAAG2C,KAAOT,EAAeU,OAAO,SAASC,IAAI,uBAA7C,sCAFhB,wDAMFV,IC2HHW,G,yDAhJb,WAAY/D,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXT,QAAS,CACPmE,WAAW,EACXK,UAAU,IANG,E,qMAYX,IAAIC,SAAQ,SAAAC,GAChB,IAAMC,EAAe,CACnBR,YAAapD,OAAOf,QACpBwE,SAAUzD,OAAOf,SAAWe,OAAOf,QAAQ4E,OAG7C,GAAID,EAAaR,UAKf,OAJA,EAAKd,SAAS,CACZrD,QAAS2E,IAGJD,IAGT,IAAIG,EAAQ,EAENC,EAAQC,aAAY,WACxB,GAAIF,GAAS,GAAI,CAgBf,OAbA9D,OAAOf,QAAU,IAAIgF,IAFA,+EAQrB,EAAK3B,SAAS,CACZrD,QAAS,CACPmE,WAAW,EACXK,UAAU,KAGdS,cAAcH,GACPJ,IAMT,GAHAC,EAAaR,YAAcpD,OAAOf,QAClC2E,EAAaH,SAAWzD,OAAOf,SAAWe,OAAOf,QAAQ4E,OAEpDD,EAAaR,UAChB,OAAOU,IAGT,EAAKxB,SAAS,CACZrD,QAAS2E,IAGXD,MACC,Q,OAGAvE,KAAKM,MAAMT,QAAQwE,WAItBzD,OAAOf,QAAQkF,eAAiB,CAC9BC,IAAKpE,OAAOf,QAAQ2B,QAAQyD,MAvET,sCAwEnBC,OAxEmB,sCA2ErBtE,OAAOf,QAAQsF,GAAG,iBAAiB,WAC7B,EAAK7E,MAAMT,QAAQwE,UAIvB,EAAKnB,SAAS,CACZrD,QAAS,CACPmE,WAAW,EACXK,UAAU,SAMlB1D,EAAMZ,WAAWa,OAAOf,S,qIAIxB,OAAKG,KAAKM,MAAMT,QAAQmE,UAEnBhE,KAAKM,MAAMT,QAAQwE,SAGtB,6BACE,4BAAQ/C,UAAU,oBAChB,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,aAAf,4CACA,uBACEA,UAAU,GACV2C,KAAK,uCACLE,IAAI,sBACJD,OAAO,UAJT,YAFF,cAWE,uBACE5C,UAAU,GACV2C,KAAK,uCACLE,IAAI,sBACJD,OAAO,UAJT,iBAXF,cAoBE,uBACE5C,UAAU,GACV2C,KAAK,0BACLE,IAAI,sBACJD,OAAO,UAJT,YApBF,cA6BE,uBACE5C,UAAU,GACV2C,KAAK,0BACLE,IAAI,sBACJD,OAAO,UAJT,gBASF,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,QA9CmC,kBAAC,EAAD,CAAeF,WAAS,IAFvB,kBAAC,EAAD,U,GA3F5B1B,cCNd8C,EAAOzD,SAASC,eAAe,QAEnCyD,IAASC,OAAO,kBAAC,EAAD,MAASF,I,mBCPzBG,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.197248fd.chunk.js","sourcesContent":["const utils = {\n  tronWeb: false,\n  contract: false,\n\n  setTronWeb(tronWeb) {\n    this.tronWeb = tronWeb;\n  },\n\n  async setContract(tronWeb, contractAddress) {\n    this.contract = await tronWeb.contract().at(contractAddress);\n  }\n};\n\nexport default utils;\n","import React, { Component } from \"react\";\n//import Swal from \"sweetalert2\";\n\nimport Utils from \"../../utils\";\nimport \"./ECommerce.scss\";\n//import TronLinkInfo from \"../TronLinkInfo\";\n\n/// La direccion de su contrato ac√° ///////////////////////////////////\nconst contractAddress = \"TPKBp42yMoudBof4g5ATm5XvC9mb9fkGe7\";\n// base85v = \"TQaWQWLW8Nz8Nf9qnAxQZLMCNvPQEa81BT\"\n// hex = \"41A03ED915BAAA7C556C0A9624B3130E74162453F4\"\n///////////////////////////////////////////////////////////////////////\n\nexport default class MensajeContract extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allMs: [],\n    };\n\n    this.addMs = this.addMs.bind(this);\n    this.getMsMensaje = this.getMsMensaje.bind(this);\n  }\n\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n  }\n\n\n  async getMsMensaje() {\n    const { allMs } = this.state;\n\n    let ms = await Utils.contract.getMsMensaje(1).call();\n    //console.log(ms);\n    let totalMs = parseInt(ms[1]._hex);\n    let i = 1;\n\n    allMs.splice(0);\n\n    while (i <= totalMs) {\n      let ms2 = await Utils.contract.getMsMensaje(i).call();\n      //console.log(totalMs);\n       if (ms2[0] !== \"nada por aqui\") {\n        allMs.push(\n        <div className=\"alert alert-secondary\" role=\"alert\">\n          <div className=\"font-weight-bold\">{ms2[0]}</div>\n          <hr></hr>\n          <div className=\"mb-2 text-muted\">Remitente: {window.tronWeb.address.fromHex(ms2[2])}</div>\n        </div>\n      );\n       }\n      \n      i++;\n    }\n\n\n        \n  };\n\n\n\n  async addMs() {\n    let mensaje = document.getElementById(\"mensaje\").value;\n    let destinatario = document.getElementById(\"direccion\").value;\n    //console.log(mensaje);\n    return Utils.contract.addMs(mensaje, destinatario).send();\n  }\n\n  \n\n\n  render() {\n    const { allMs } = this.state;\n\n    return (\n      \n      <div className=\"eCommerce-component-container\">\n        \n          <form action=\"\" className=\"alert alert-success\">\n            <input type=\"text\" name=\"mensaje\" id=\"mensaje\" placeholder=\"Escribe tu mensaje\"></input>\n            <input type=\"text\" name=\"direccion\" id=\"direccion\" placeholder=\"TB7RTxBPY4eMvKjceXj8SWjVnZCrWr4XvF\"></input>\n            <button type=\"button\" onClick={() => this.addMs()}>Enviar</button>\n          </form>\n          \n        \n        <div className=\"eCommerce-item-container\">\n          {allMs}\n          \n        </div>\n        <div className=\"eCommerce-item-container\">\n          <button className=\"btn btn-primary\" onClick={() => this.getMsMensaje()}>Ver mis Mensajes</button>\n        </div>\n        \n      </div> \n\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\n\nimport \"./TronLinkInfo.scss\";\n\nexport default class TronLinkInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      accountAddress: \"account address will show up here\",\n      accountBalance: \"account balance will show up here\",\n      accountBandwidth: \"account bandwidth will show up here\"\n    };\n  }\n\n  // Uncomment each call one at a time to see your account information filled out\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n    this.fetchAccountBandwidth();\n  }\n\n  // // The function below will return an object with address, balance, create_time,\n  // // account_resource;\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n     const accountAddressInBase58 = window.tronWeb.address.fromHex(\n       accountAddress\n     ); // Base58\n\n    this.setState({\n      accountAddress: accountAddressInBase58\n    });\n  }\n  //\n  // // The function below will return the account balance in SUN as a number\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      //accountBalance: balanceInSun // Muestra el balance en SUN\n      accountBalance: balanceInTRX\n    });\n  }\n  //\n  // // La funcion aqui abajo muestra el ancho de banda como un numero\n  async fetchAccountBandwidth() {\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\n\n    this.setState({\n      accountBandwidth: accountBandwidth\n    });\n  }\n\n\n  render() {\n    const { accountAddress, accountBalance, accountBandwidth,} = this.state;\n    return (\n      <div className=\"tronLinkInfo-component-container\">\n        <div className=\"account-info-header\"> Account Information </div>\n        <div className=\"account-info-address\">\n          Address: <span>{accountAddress}</span>\n        </div>\n        <div className=\"account-info-balance\">\n          Balance: <span>{accountBalance}</span>\n        </div>\n        <div className=\"account-info-bandwidth\">\n          Bandwidth: <span>{accountBandwidth}</span>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","import React, { Component } from \"react\";\nimport TronWeb from \"tronweb\";\n\nimport Utils from \"../../utils\";\nimport ECommerce from \"../ECommerce\"; \nimport TronLinkInfo from \"../TronLinkInfo\";\nimport TronLinkGuide from \"../TronLinkGuide\";\nimport \"./App.scss\";\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await new Promise(resolve => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false\n            }\n          });\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) {\n          return tries++;\n        }\n\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object if TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS\n      };\n\n      window.tronWeb.on(\"addressChange\", () => {\n        if (this.state.tronWeb.loggedIn) {\n          return;\n        }\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true\n          }\n        });\n      });\n    }\n\n    Utils.setTronWeb(window.tronWeb);\n  }\n\n  render() {\n    if (!this.state.tronWeb.installed) return <TronLinkGuide />;\n\n    if (!this.state.tronWeb.loggedIn) return <TronLinkGuide installed />;\n\n    return (\n      <div>\n        <header className=\"header-container\">\n          <div className=\"resource-links-container\">\n            <div className=\"app-title\">TRX-Mensajes (Mensajes descentralizados)</div>\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Gu√≠as\n            </a>\n            &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              API Reference\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronscan.org/#/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronScan\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronstation.io/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronStation\n            </a>\n          </div>\n          <TronLinkInfo />\n        </header>\n        <div>\n          <ECommerce />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// {tWeb()}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nvar root = document.getElementById(\"root\");\n\nReactDOM.render(<App />, root);\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}