{"version":3,"sources":["utils/index.js","components/ECommerce/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","MensajeContract","props","state","allMs","addMs","bind","getMsMensaje","Utils","window","call","ms","totalMs","parseInt","_hex","i","splice","ms2","trx","getAccount","account","accountAddress","address","fromHex","notif","className","role","mensaje","document","getElementById","value","destinatario","send","action","type","name","id","placeholder","onClick","Component","TronLinkInfo","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","accountAddressInBase58","setState","getBalance","balanceInSun","balanceInTRX","fromSun","getBandwidth","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","open","TronLinkGuide","installed","href","target","rel","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.6e8a4b2a.chunk.js","sourcesContent":["const utils = {\n  tronWeb: false,\n  contract: false,\n\n  setTronWeb(tronWeb) {\n    this.tronWeb = tronWeb;\n  },\n\n  async setContract(tronWeb, contractAddress) {\n    this.contract = await tronWeb.contract().at(contractAddress);\n  }\n};\n\nexport default utils;\n","import React, { Component } from \"react\";\nimport Utils from \"../../utils\";\nimport \"./ECommerce.scss\";\n//import TronLinkInfo from \"../TronLinkInfo\";\n\n/// La direccion de su contrato ac√° ///////////////////////////////////\nconst contractAddress = \"TE2Yndwa6HBeqoPscrYfyZnV3gQEdhRLeq\";\n// base85v = \"TE2Yndwa6HBeqoPscrYfyZnV3gQEdhRLeq\"\n///////////////////////////////////////////////////////////////////////\n\nexport default class MensajeContract extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allMs: []\n    };\n\n    this.addMs = this.addMs.bind(this);\n    this.getMsMensaje = this.getMsMensaje.bind(this);\n  }\n\n\n  async componentDidMount() {\n    await Utils.setContract(window.tronWeb, contractAddress);\n  }\n\n  async getMsMensaje() {\n    const { allMs } = this.state;\n\n    let ms = await Utils.contract.getMsMensaje(0).call();\n    let totalMs = parseInt(ms[1]._hex);\n    let i = 0;\n\n    allMs.splice(0);\n\n    while (i <= totalMs) {\n      let ms2 = await Utils.contract.getMsMensaje(i).call();\n      let account = await window.tronWeb.trx.getAccount();\n      let accountAddress = account.address;\n      accountAddress = window.tronWeb.address.fromHex(accountAddress);\n\n       if (ms2[0] !== \"nada por aqui\") {\n        if (window.tronWeb.address.fromHex(ms2[2]) === accountAddress) {\n            let notif = (\n              <div className=\"alert alert-primary\" role=\"alert\">\n                <div className=\"mb-2 text-muted\">Para: {window.tronWeb.address.fromHex(ms2[3])}</div>\n                <hr></hr>\n                <div className=\"font-weight-bold\">{ms2[0]}</div>\n              </div>\n            );\n            allMs.splice(0,0,notif);\n          }else{\n            let notif = (\n              <div className=\"alert alert-secondary\" role=\"alert\">\n                <div className=\"mb-2 text-muted\">Responder: {window.tronWeb.address.fromHex(ms2[2])}</div>\n                <hr></hr>\n                <div className=\"font-weight-bold\">{ms2[0]}</div>\n              </div>\n            );\n            allMs.splice(0,0,notif);\n          }\n          \n         }\n      \n      i++;\n    }    \n  };\n\n\n  async addMs() {\n    const { allMs } = this.state;\n\n    let mensaje = document.getElementById(\"mensaje\").value;\n    let destinatario = document.getElementById(\"direccion\").value;\n    let notif = (\n            <div className=\"alert alert alert-success\" role=\"alert\">\n              <div className=\"mb-2 text-muted\">Para: {destinatario}</div>\n              <hr></hr>\n              <div className=\"font-weight-bold\">{mensaje}</div>\n            </div>\n          );\n    allMs.splice(0,0,notif);\n    return Utils.contract.addMs(mensaje, destinatario).send();\n    \n  }\n\n  render() {\n    const { allMs } = this.state;\n\n    return (\n      \n      <div className=\"eCommerce-component-container\">\n        \n        <form action=\"\" className=\"alert alert-success\">\n          <input type=\"text\" name=\"mensaje\" id=\"mensaje\" placeholder=\"Escribe tu mensaje\"></input>\n          <input type=\"text\" name=\"direccion\" id=\"direccion\" placeholder=\"TB7RTxBPY4eMvKjceXj8SWjVnZCrWr4XvF\"></input>\n          <button type=\"button\" onClick={() => this.addMs()}>Enviar</button>\n        </form>\n        <div className=\"eCommerce-item-container\">\n          <button className=\"btn btn-primary\" onClick={() => this.getMsMensaje()}>Ver mis Mensajes</button>\n          <hr></hr>\n          <hr></hr>\n        </div>\n        <div className=\"eCommerce-item-container\">{allMs}</div>\n        \n        \n      </div> \n\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\n\nimport \"./TronLinkInfo.scss\";\n\nexport default class TronLinkInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      accountAddress: \"account address will show up here\",\n      accountBalance: \"account balance will show up here\",\n      accountBandwidth: \"account bandwidth will show up here\"\n    };\n  }\n\n  // Uncomment each call one at a time to see your account information filled out\n  componentDidMount() {\n    this.fetchAccountAddress();\n    this.fetchAccountBalance();\n    this.fetchAccountBandwidth();\n  }\n\n  // // The function below will return an object with address, balance, create_time,\n  // // account_resource;\n  async fetchAccountAddress() {\n    const account = await window.tronWeb.trx.getAccount();\n    const accountAddress = account.address; // HexString(Ascii)\n     const accountAddressInBase58 = window.tronWeb.address.fromHex(\n       accountAddress\n     ); // Base58\n\n    this.setState({\n      accountAddress: accountAddressInBase58\n    });\n  }\n  //\n  // // The function below will return the account balance in SUN as a number\n  async fetchAccountBalance() {\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\n\n    this.setState({\n      //accountBalance: balanceInSun // Muestra el balance en SUN\n      accountBalance: balanceInTRX\n    });\n  }\n  //\n  // // La funcion aqui abajo muestra el ancho de banda como un numero\n  async fetchAccountBandwidth() {\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\n\n    this.setState({\n      accountBandwidth: accountBandwidth\n    });\n  }\n\n\n  render() {\n    const { accountAddress, accountBalance, accountBandwidth,} = this.state;\n    return (\n      <div className=\"tronLinkInfo-component-container\">\n        <div className=\"account-info-header\"> Account Information </div>\n        <div className=\"account-info-address\">\n          Address: <span>{accountAddress}</span>\n        </div>\n        <div className=\"account-info-balance\">\n          Balance: <span>{accountBalance}</span>\n        </div>\n        <div className=\"account-info-bandwidth\">\n          Bandwidth: <span>{accountBandwidth}</span>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","import React, { Component } from \"react\";\nimport TronWeb from \"tronweb\";\n\nimport Utils from \"../../utils\";\nimport ECommerce from \"../ECommerce\"; \nimport TronLinkInfo from \"../TronLinkInfo\";\nimport TronLinkGuide from \"../TronLinkGuide\";\nimport \"./App.scss\";\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await new Promise(resolve => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false\n            }\n          });\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) {\n          return tries++;\n        }\n\n        this.setState({\n          tronWeb: tronWebState\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object if TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS\n      };\n\n      window.tronWeb.on(\"addressChange\", () => {\n        if (this.state.tronWeb.loggedIn) {\n          return;\n        }\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true\n          }\n        });\n      });\n    }\n\n    Utils.setTronWeb(window.tronWeb);\n  }\n\n  render() {\n    if (!this.state.tronWeb.installed) return <TronLinkGuide />;\n\n    if (!this.state.tronWeb.loggedIn) return <TronLinkGuide installed />;\n\n    return (\n      <div>\n        <header className=\"header-container\">\n          <div className=\"resource-links-container\">\n            <div className=\"app-title\">TRX-Mensajes (Mensajes descentralizados)</div>\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Gu√≠as\n            </a>\n            &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://developers.tron.network/docs\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              API Reference\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronscan.org/#/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronScan\n            </a>\n             &nbsp; - &nbsp;\n            <a\n              className=\"\"\n              href=\"https://tronstation.io/\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              TronStation\n            </a>\n          </div>\n          <TronLinkInfo />\n        </header>\n        <div>\n          <ECommerce />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// {tWeb()}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nvar root = document.getElementById(\"root\");\n\nReactDOM.render(<App />, root);\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}