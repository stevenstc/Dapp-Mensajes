{"version":3,"sources":["utils/index.js","components/ECommerce/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","MensajeContract","props","state","allMs","addMs","bind","getMsMensaje","adress","Utils","window","valor","document","getElementById","value","focus","call","ms","totalMs","parseInt","_hex","i","splice","ms2","trx","getAccount","account","accountAddress","address","fromHex","notif","className","role","type","onClick","mensaje","destinatario","send","action","for","id","rows","placeholder","Component","TronLinkInfo","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","accountAddressInBase58","setState","getBalance","balanceInSun","balanceInTRX","fromSun","getBandwidth","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","open","TronLinkGuide","installed","href","target","rel","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.f047f7d6.chunk.js","sourcesContent":["const utils = {\r\n  tronWeb: false,\r\n  contract: false,\r\n\r\n  setTronWeb(tronWeb) {\r\n    this.tronWeb = tronWeb;\r\n  },\r\n\r\n  async setContract(tronWeb, contractAddress) {\r\n    this.contract = await tronWeb.contract().at(contractAddress);\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","import React, { Component } from \"react\";\r\nimport Utils from \"../../utils\";\r\n\r\n\r\n/// La direccion de su contrato ac√° ///////////////////////////////////\r\nconst contractAddress = \"TE2Yndwa6HBeqoPscrYfyZnV3gQEdhRLeq\";\r\n// base85v = \"TE2Yndwa6HBeqoPscrYfyZnV3gQEdhRLeq\"\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport default class MensajeContract extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allMs: []\r\n    };\r\n\r\n    this.addMs = this.addMs.bind(this);\r\n    this.getMsMensaje = this.getMsMensaje.bind(this);\r\n    this.adress = this.adress.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Utils.setContract(window.tronWeb, contractAddress);\r\n  };\r\n\r\n  adress(valor){\r\n    document.getElementById('direccion').value = valor;\r\n    document.getElementById('mensaje').focus();\r\n  };\r\n\r\n  async getMsMensaje() {\r\n    const { allMs } = this.state;\r\n\r\n    let ms = await Utils.contract.getMsMensaje(0).call();\r\n    let totalMs = parseInt(ms[1]._hex);\r\n    let i = 0;\r\n\r\n    allMs.splice(0);\r\n\r\n    while (i <= totalMs) {\r\n      let ms2 = await Utils.contract.getMsMensaje(i).call();\r\n      let account = await window.tronWeb.trx.getAccount();\r\n      let accountAddress = account.address;\r\n      accountAddress = window.tronWeb.address.fromHex(accountAddress);\r\n\r\n       if (ms2[0] !== \"nada por aqui\") {\r\n        if (window.tronWeb.address.fromHex(ms2[2]) === accountAddress) {\r\n            let notif = (\r\n              <div className=\"alert alert-primary\" role=\"alert\">\r\n                <div className=\"mb-2 text-muted\">Para: <span><button type=\"button\" className=\"btn btn-light\" onClick={() => this.adress(window.tronWeb.address.fromHex(ms2[3]))}>{window.tronWeb.address.fromHex(ms2[3])}</button></span></div>\r\n                <hr></hr>\r\n                <div className=\"font-weight-bold\">{ms2[0]}</div>\r\n              </div>\r\n            );\r\n            allMs.splice(0,0,notif);\r\n          }else{\r\n            let notif = (\r\n              <div className=\"alert alert-secondary\" role=\"alert\">\r\n                <div className=\"mb-2 text-muted\">Responder: <span><button type=\"button\" className=\"btn btn-success\" onClick={() => this.adress(window.tronWeb.address.fromHex(ms2[2]))}>{window.tronWeb.address.fromHex(ms2[2])}</button></span></div>\r\n                <hr></hr>\r\n                <div className=\"font-weight-bold\">{ms2[0]}</div>\r\n              </div>\r\n            );\r\n            allMs.splice(0,0,notif);\r\n          }\r\n          \r\n         }\r\n      \r\n      i++;\r\n    }    \r\n  };\r\n\r\n\r\n  async addMs() {\r\n    const { allMs } = this.state;\r\n\r\n    let mensaje = document.getElementById(\"mensaje\").value;\r\n    let destinatario = document.getElementById(\"direccion\").value;\r\n    let notif = (\r\n            <div className=\"alert alert alert-success\" role=\"alert\">\r\n              <div className=\"mb-2 text-muted\">Para: {destinatario}</div>\r\n              <hr></hr>\r\n              <div className=\"font-weight-bold\">{mensaje}</div>\r\n            </div>\r\n          );\r\n    allMs.splice(0,0,notif);\r\n    document.getElementById(\"mensaje\").value = \"\";\r\n    document.getElementById(\"direccion\").value = \"\";\r\n    return Utils.contract.addMs(mensaje, destinatario).send();\r\n    \r\n  };\r\n\r\n  render() {\r\n    const { allMs } = this.state;\r\n    return (\r\n      \r\n      <div className=\"eCommerce-component-container\">\r\n        \r\n        <form action=\"\" className=\"alert alert-success\">\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlTextarea1\">Direcci√≥n</label>\r\n            <textarea className=\"form-control\" id=\"direccion\" rows=\"1\" placeholder=\"TB7.......r4XvF\"></textarea>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlTextarea2\">Escribe tu mensaje</label>\r\n            <textarea className=\"form-control\" id=\"mensaje\" rows=\"3\" placeholder=\"Escribe tu mensaje\"></textarea>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <button className=\"btn btn-success\" type=\"button\" onClick={() => this.addMs()}>Enviar</button>\r\n             Costo aproximado: 106420 Energ√≠a + 412 Ancho de Banda\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"eCommerce-item-container\">\r\n          <button className=\"btn btn-primary\" onClick={() => this.getMsMensaje()}>Ver mis Mensajes</button>\r\n          <hr></hr>\r\n        </div>\r\n        <div className=\"eCommerce-item-container\">{allMs}</div>\r\n\r\n      </div> \r\n\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TronLinkInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      accountAddress: \"account address will show up here\",\r\n      accountBalance: \"account balance will show up here\",\r\n      accountBandwidth: \"account bandwidth will show up here\"\r\n    };\r\n  }\r\n\r\n  // Uncomment each call one at a time to see your account information filled out\r\n  componentDidMount() {\r\n    this.fetchAccountAddress();\r\n    this.fetchAccountBalance();\r\n    this.fetchAccountBandwidth();\r\n  }\r\n\r\n  // // The function below will return an object with address, balance, create_time,\r\n  // // account_resource;\r\n  async fetchAccountAddress() {\r\n    const account = await window.tronWeb.trx.getAccount();\r\n    const accountAddress = account.address; // HexString(Ascii)\r\n     const accountAddressInBase58 = window.tronWeb.address.fromHex(\r\n       accountAddress\r\n     ); // Base58\r\n\r\n    this.setState({\r\n      accountAddress: accountAddressInBase58\r\n    });\r\n  }\r\n  //\r\n  // // The function below will return the account balance in SUN as a number\r\n  async fetchAccountBalance() {\r\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\r\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\r\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\r\n\r\n    this.setState({\r\n      //accountBalance: balanceInSun // Muestra el balance en SUN\r\n      accountBalance: balanceInTRX\r\n    });\r\n  }\r\n  //\r\n  // // La funcion aqui abajo muestra el ancho de banda como un numero\r\n  async fetchAccountBandwidth() {\r\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\r\n\r\n    this.setState({\r\n      accountBandwidth: accountBandwidth\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { accountAddress, accountBalance, accountBandwidth,} = this.state;\r\n    return (\r\n      <div className=\"tronLinkInfo-component-container\">\r\n        <div className=\"account-info-header\"> Account Information </div>\r\n        <div className=\"account-info-address\">\r\n          Address: <span>{accountAddress}</span>\r\n        </div>\r\n        <div className=\"account-info-balance\">\r\n          Balance: <span>{accountBalance}</span>\r\n        </div>\r\n        <div className=\"account-info-bandwidth\">\r\n          Bandwidth: <span>{accountBandwidth}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport TronLinkLogo from './TronLinkLogo.png';\r\n\r\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\nconst logo = (\r\n    <div className='logo'>\r\n        <img src={ TronLinkLogo } alt='TronLink logo' />\r\n    </div>\r\n);\r\n\r\nconst openTronLink = () => {\r\n    window.open(WEBSTORE_URL, '_blank');\r\n};\r\n\r\nconst TronLinkGuide = props => {\r\n    const {\r\n        installed = false\r\n    } = props;\r\n\r\n    if(!installed) {\r\n        return (\r\n            <div className='tronLink' onClick={ openTronLink }>\r\n                <div className='info'>\r\n                    <h1>TronLink Required</h1>\r\n                    <p>\r\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\r\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\r\n                        Once installed, return back and refresh the page.\r\n                    </p>\r\n                </div>\r\n                { logo }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='tronLink hover' onClick={ openTronLink }>\r\n            <div className='info'>\r\n                <h1>Log in Required</h1>\r\n                <p>\r\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\r\n                    first wallet or decrypt a previously-created wallet.\r\n                </p>\r\n            </div>\r\n            { logo }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TronLinkGuide;","import React, { Component } from \"react\";\r\nimport TronWeb from \"tronweb\";\r\n\r\nimport Utils from \"../../utils\";\r\nimport ECommerce from \"../ECommerce\"; \r\nimport TronLinkInfo from \"../TronLinkInfo\";\r\nimport TronLinkGuide from \"../TronLinkGuide\";\r\n\r\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tronWeb: {\r\n        installed: false,\r\n        loggedIn: false\r\n      }\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await new Promise(resolve => {\r\n      const tronWebState = {\r\n        installed: !!window.tronWeb,\r\n        loggedIn: window.tronWeb && window.tronWeb.ready\r\n      };\r\n\r\n      if (tronWebState.installed) {\r\n        this.setState({\r\n          tronWeb: tronWebState\r\n        });\r\n\r\n        return resolve();\r\n      }\r\n\r\n      let tries = 0;\r\n\r\n      const timer = setInterval(() => {\r\n        if (tries >= 10) {\r\n          const TRONGRID_API = \"https://api.trongrid.io\";\r\n\r\n          window.tronWeb = new TronWeb(\r\n            TRONGRID_API,\r\n            TRONGRID_API,\r\n            TRONGRID_API\r\n          );\r\n\r\n          this.setState({\r\n            tronWeb: {\r\n              installed: false,\r\n              loggedIn: false\r\n            }\r\n          });\r\n          clearInterval(timer);\r\n          return resolve();\r\n        }\r\n\r\n        tronWebState.installed = !!window.tronWeb;\r\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n\r\n        if (!tronWebState.installed) {\r\n          return tries++;\r\n        }\r\n\r\n        this.setState({\r\n          tronWeb: tronWebState\r\n        });\r\n\r\n        resolve();\r\n      }, 100);\r\n    });\r\n\r\n    if (!this.state.tronWeb.loggedIn) {\r\n      // Set default address (foundation address) used for contract calls\r\n      // Directly overwrites the address object if TronLink disabled the\r\n      // function call\r\n      window.tronWeb.defaultAddress = {\r\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\r\n        base58: FOUNDATION_ADDRESS\r\n      };\r\n\r\n      window.tronWeb.on(\"addressChange\", () => {\r\n        if (this.state.tronWeb.loggedIn) {\r\n          return;\r\n        }\r\n\r\n        this.setState({\r\n          tronWeb: {\r\n            installed: true,\r\n            loggedIn: true\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    Utils.setTronWeb(window.tronWeb);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.tronWeb.installed) return <TronLinkGuide />;\r\n\r\n    if (!this.state.tronWeb.loggedIn) return <TronLinkGuide installed />;\r\n\r\n    return (\r\n      <div>\r\n        <header className=\"header-container\">\r\n          <div className=\"resource-links-container\">\r\n            <div className=\"app-title\">TRX-Mensajes (Mensajes descentralizados)</div>\r\n            <a\r\n              className=\"\"\r\n              href=\"https://developers.tron.network/docs\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              Gu√≠as\r\n            </a>\r\n            &nbsp; - &nbsp;\r\n            <a\r\n              className=\"\"\r\n              href=\"https://developers.tron.network/docs\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              API Reference\r\n            </a>\r\n             &nbsp; - &nbsp;\r\n            <a\r\n              className=\"\"\r\n              href=\"https://tronscan.org/#/\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              TronScan\r\n            </a>\r\n             &nbsp; - &nbsp;\r\n            <a\r\n              className=\"\"\r\n              href=\"https://tronstation.io/\"\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              TronStation\r\n            </a>\r\n          </div>\r\n          <TronLinkInfo />\r\n        </header>\r\n        <div>\r\n          <ECommerce />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n// {tWeb()}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nvar root = document.getElementById(\"root\");\r\n\r\nReactDOM.render(<App />, root);\r\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}